//=============== Variables List ===============\\

#include <Servo.h>

Servo rotate;            //Rotates robotic arm horizontally
Servo base;              //Lifts base motor
Servo arm;               //Lifts highest motor 
Servo gripper;           //Closes to grab pennies
Servo orientationYaw;   //Orients gripper device in Yaw direction
Servo flipServo;


int joyRX = 0;           //Analog Pin 0 pairs with the X axis on Right joystick
int joyRY = 1;           //Analog Pin 1 pairs with the Y axis on Right joystick
int joyLY = 2;           //Analog Pin 2 pairs with the Y axis on Left Joystick
int joyLX = 3;           //Analog Pin 3 pairs with the Y axis on Left Joystick

int joyRB = 5;
int joyLB = 4;

float sideA;
float sideB;

//=============== Setup Loop ===============\\

void setup(){
  pinMode(joyRB, INPUT);
  pinMode(joyLB, INPUT);
  pinMode(statusLED, OUPUT);
  
  rotate.attach(6);
  base.attach(7);
  arm.attach(8);
  gripper.attach(9);
  orientationYaw.attach(10);
  flipServo.attach(11);
  
  
  initialize();
  
  Serial.begin(9600);
}

//=============== Main Loop ===============\\

void loop(){
  movement(rotate, analogRead(joyRX), pause, degree);
  movement(base, analogRead(joyRY), pause, degree);
  movement(arm, analogRead(joyLY), pause, degree);
  movement(gripper, analogRead(joyLX), pause, degree);
  stabilize();
  buttonCheck();
}

//=============== Functions List ===============\\

void movement(Servo servo, int val, int velox, magnus){    //Velox refers to the delay between movement.  Magnus refers to the degrees
  float currentAngle = servo.read();
  if(val == 5000){   //Allows automation without referencing currentAngle. 
    servo.write(magnus);
    currentAngle = magnus;}
  else if(val > 800){
    currentAngle += magnus;
    servo.write(currentAngle);}
  else if(val < 200){
    currentAngle -= mangus;
    servo.write(currentAngle);}
  delay(velox);
}
  
void stabilize(){   //Needs testing based on servo orientation and gyro orientation
 float currentYaw = orientationYaw.read();
 float degreeVal = 90.0 - getYaw(); 
  if(abs(degreeVal) > 3){
    movement(orientationYaw, 5000, pause, degreeVal)}
}
  
float getYaw(){
  float yaw = Serial.read();
  return yaw;
}
  
void buttonCheck(){
  if(digitalRead(buttonRB == LOW){
    initialize();}
    
  if(digitalRead(buttonLB == LOW){
    automate();}
}
  
void automate(){
  toggleGripper();
  for(int i = p; i < p + 10; i++){
    sideC = doMath("sideC");
    float alpha = doMath("alpha");
    float beta = doMath("beta");
    float theta = doMath("theta");
    
float doMath(char part, int index){
    b = getGyroVals;   //angle beta
    float sideC = sqrt(xList[i]*xList[index] + (250 + abs(yList[index])*yList[index]));
    theta = atan(xList[index]/(250 + yList[index]));
    alpha = asin((sideA*sin(gyro))/sideB);
    gamma = asin((sideC*sin(gyro))/sideB);
              
    float alphaNeg = atan(heightG/sideC);
    alpha -= alphaNeg;

    case "alpha";
       return a;
    case "beta"
       return b;
    case "theta";   //Rotational Angle
       return t;
    case "sideC";   //length of side C
        return c;
    case "alphaNeg";
        return aNeg;}
        

        
void initialize(){
  movement(base, 5000, 100, baseInit);
  movement(arm, 5000, 100, armInit);
  movement(rotate, 5000, 100, rotateInit);
  movement(gripper, 5000, 100, gripperInit);
  }

    

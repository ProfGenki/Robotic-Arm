//=====Libraries=====\\
#include <Servo.h>
#include <math.h>

//=====Servo Objects=====\\
Servo rotateServo;
Servo baseServo;
Servo armServo;
Servo yServo;

//=====Controller Components=====\\
int bBtn = 7;
int gBtn = 6;
int rBtn = 5;
int statusLED = 4;
int joyRX = 0;
int joyRY = 1;
int joyLY = 2;

//=====Control Variables=====\\
float magnus = 1.0; //Degrees
int velox = 4;      //Milliseconds
int p;              //Pennies Sorted
float sideB = "placeholder";
float sideA = "placeholder";
int bPrev;
int gPrev;
int rPrev;
int autoscale = 150; //Timing for automation
int pos;
float yNull = "placeholder";
float yDelta;
float yCurrent; 
int yThesh = 2;   //Change needs to be greater than 2. 

//====================Setup====================\\
void setup() {
  pos = 0;
  p = 0;
  
  pinMode(bBtn, INPUT);
  pinMode(gBtn, INPUT);
  pinMode(rBtn, INPUT);
  pinMode(statusLED, OUTPUT);
  
  rotateServo.attach(8);
  baseServo.attach(9);
  armServo.attach(10);
  yServo.attach(11);

Serial.begin(9600);
delay(150);

initPos();
}

//====================Main Loop====================\\
void loop() {
  getMovement();
  buttonCheck();
}

//=====================Control====================\\

//=====Automate=====\\
void automate(){
  flip();
  for(int i = p; i < p + 10; i++){
    float alpha = getAngle(a);
    float beta = getAngle(b);
    float gamma = getAngle(g);
    float theta = getAngle(t);

    movement(baseServo, 160);
    delay(autoScale);
    movement(armServo, alpha);
    delay(autoScale);
    movement(baseServo, beta);
    delay(autoScale);
    movement(rotateServo, theta);
    delay(autoScale);
    stabilize(); 
  }
  flip();
  p += 10;
}

//=====ButtonCheck=====\\
void buttonCheck(){
  if(digitalRead(gBtn) != gPrev){
    gPrev = digitalRead(gBtn);
    automate();}
  if(digitalRead(bBtn) != bPrev){
    bPrev = digitalRead(bBtn);
    calibrate();}
  if(digitalRead(rBtn) != rPrev){
    rPrev = digitalRead(rBtn);
    recall();}
}

//=====Flip=====\\
void flip(){
  statusCheck();
  if(pos == 0){
    pos = 1;
    yNull -= 180;
    orientationServo.write(180);}
  else{
    pos = 0;
    yNull += 180;
    orientationServo.write(0);}
}

//=====GetAngle=====\\
float getAngle(char angle, int j){
  normalize();

  float xCoord = xList[j];
  float yCoord = yList[j];
  
  sideC = sqrt(xCoord*xCoord + (250 - yCoord*yCoord));
  float angleG = 90 - abs(yDelta);
  float angleT = atan(xCoord/(250+yCoord));
  float angleA = asin((sideA*sin(angleG))/sideB);
  float angleB = asin((sideC*sin(angleG))/sideB);

  switch(angle)
  case "a":
    return angleA;
    break;
  case "b":
    return angleB;
    break;
  case "g":
    return angleG;
    break;
  case "t":
    return angleT;
    break;  
  }

//======StatusCheck======\\
void statusCheck(){
  if(digitalRead(statusLED) == LOW){
    digitalWrite(statusLED, HIGH);}
  else{
    digitalWrite(statusLED, LOW);}
}

//====================Gyroscope====================\\

//=====GetGyroVals=====\\
float getGyroVals(char axis){
  if(axis == "x" || axis == "pitch"){
    if(Serial.available()){
      Serial.write("Requesting X");
      while(!Serial.available()){ }
        float xVal = Serial.read();
        return xVal;}
    }

  if(axis == "y" || axis == "roll"){
    if(Serial.available()){
      Serial.write("Requesting Y");
      while(!Serial.available()){ }
        float yVal = Serial.read();
        return yVal;}
   }

  if(axis == "z" || axis == "yaw"){
    if(Serial.available()){
      Serial.write("Requesting Z");
      while(!Serial.available()){ }
        float zVal = Serial.read();
        return zVal;}
   }
}

//=====Normalize=====\\
void normalize(){
   float xRaw = getGyroVals(x);
   float yRaw = getGyroVals(y);
   float zRaw = getGyroVals(z);

   xDelta = xRaw - xNull;
   yDelta = yRaw - yNull;
   zDelta = zRaw - zNull;
}

//=====Stabilize=====\\
void stabilize(){
  normalize();
  yCurrent += yDelta 
  
  if((yCurrent <= yNull - yThresh) || yCurrent >= yNull + yThresh){
    yServo.write(yCurrent);}
}

//======================Servo Movement====================\\

//=====getMovement=====\\
void getMovement(){
   if(analogRead(joyRX) > 800){
      movement(rotateServo, magnus);}
   if(analogRead(joyRX) < 200){
      movement(rotateServo, -magnus);}
   if(analogRead(joyRY > 800){
      movement(baseServo, magnus);}
   if(analogRead(joyRY) < 200){
      movement(baseServo, -magnus);}
   if(analogRead(joyLY) > 800){
      movement(armServo, magnus);}
   if(analogRead(joyLY) < 200){
      movement(armServo, -magnus);}
}

//=====Movement=====\\
void movement(Servo servo, float m){
   servo.write(m);
   delay(velox);
   stabilize();
}



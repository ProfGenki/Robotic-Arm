#include <Servo.h>



void setup() {
  p = 0;
  
  pinMode(bBtn, INPUT);
  pinMode(gBtn, INPUT);
  pinMode(rBtn, INPUT);
  pinMode(statusLED, OUTPUT);
  
  rotateServo.attach(8);
  baseServo.attach(9);
  armServo.attach(10);
  yServo.attach(11);
  xServo.attach(12);

Serial.begin(9600);
}

void loop() {
  getMovement();
  buttonCheck();
}

//=====================Control====================\\

//=====Automate=====\\
void automate(){
  flip();
  for(int i = p; i < 10 + p; i++){
    float alpha = getAngle(a);
    float beta = getAngle(b);
    float gamma = getAngle(g);
    float theta = getAngle(t);

    movement(baseServo, 160);
    delay(autoScale);
    movement(armServo, alpha);
    delay(autoScale);
    movement(baseServo, beta);
    delay(autoScale);
    movement(rotateServo, theta);
    delay(autoScale);
    stabilize(); 
  }
  flip();
}

//=====ButtonCheck=====\\
void buttonCheck(){
  if(digitalRead(gBtn) != gPrev){
    gPrev = digitalRead(gBtn);
    automate();}
  if(digitalRead(bBtn) != bPrev){
    bPrev = digitalRead(bBtn);
    calibrate();}
  if(digitalRead(rBtn) != rPrev){
    rPrev = digitalRead(rBtn);
    recall();}
}

//=====Flip=====\\
void flip(){
  statusCheck();
  if(pos == 0){
    pos = 1;
    xNull -= 180;
    yNull -= 180;
    zNull -= 180;
    orientationServo.write(180);}
  else{
    pos = 0;
    xNull += 180;
    yNull += 180;
    zNull += 180;
    orientationServo.write(0);}
}

//=====GetAngle=====\\
float getAngle(char angle,int j){
  normalize();

  xCoord = xList[j];
  yCoord = yList[j];
  
  sideC = sqrt(xCoord*xCoord + (250 - yCoord*yCoord));
  angleG = yDelta;
  angleT = atan(xCoord/(250+yCoord));
  angleA = asin((sideA*sin(angleG))/sideB);
  angleB = asin((sideC*sin(angleG))/sideB);
  
  
  switch(angle)
  case "a":
    return angleA;
    break;
  case "b":
    return angleB;
    break;
  case "g":
    return angleG;
    break;
  case "t":
    return angleT;
    break;  
  }

//======StatusCheck======\\
void statusCheck(){
  if(digitalRead(statusLED) == LOW){
    digitalWrite(statusLED, HIGH);}
  else{
    digitalWrite(statusLED, LOW);}
}

//====================Gyroscope====================\\

//=====GetGyroVals=====\\
float getGyroVals(char axis){
  if(axis == "x" || axis == "pitch"){
    if(Serial.available()){
      Serial.write("Requesting X");
      while(!Serial.available()){ }
        xVal = Serial.read();
        return xVal;}
    }

  if(axis == "y" || axis == "roll"){
    if(Serial.available()){
      Serial.write("Requesting Y");
      while(!Serial.available()){ }
        yVal = Serial.read();
        return yVal;}
   }

  if(axis == "z" || axis == "yaw"){
    if(Serial.available()){
      Serial.write("Requesting Z");
      while(!Serial.available()){ }
        zVal = Serial.read();
        return zVal;}
   }
}

//=====Normalize=====\\
void normalize(){
   xRaw = getGyroVals(x);
   yRaw = getGyroVals(y);
   zRaw = getGyroVals(z);

   xDelta = xRaw - xNull;
   yDelta = yRaw - yNull;
   zDelta = zRaw - zNull;
}

//=====Stabilize=====\\
void stabilize(){
  normalize();

  if(abs(xDelta) > xThresh){
     xCurrent += xDelta;
     xServo.write(xCurrent);}
   if(abs(yDelta) > yThresh){
     yCurrent += yDelta;
     yServo.write(yCurrent);}
   if(abs(zDelta) > zThresh){
     zCurrent += zDelta;
     zServo.write(zCurrent);}
}

//======================Servo Movement====================\\

//=====getMovement=====\\
void getMovement(){
   if(analogRead(joyRX) > 800){
      movement(rotateServo, magnus);}
   if(analogRead(joyRX) < 200){
      movement(rotateServo, -magnus);}
   if(analogRead(joyRY > 800){
      movement(baseServo, magnus);}
   if(analogRead(joyRY) < 200){
      movement(baseServo, -magnus);}
   if(analogRead(joyLY) > 800){
      movement(armServo, magnus);}
   if(analogRead(joyLY) < 200){
      movement(armServo, -magnus);}
}

//=====Movement=====\\
void movement(Servo servo, int magnus){
   servo.write(magnus);
   delay(velox);
   stabilize();
}



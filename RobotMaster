/******************************************************************************
*                                                                             *
*                            Loyola Academy Science Olympiad                  *
*                                 Varsity Robotic Arm                         *
*                                     2016-2017                               *
*                                     Version 3                               *
*                                                                             *
*                              Code by: Trey Starshak                         *
*                                                                             *
*                                                                             *
*                                                                             *
******************************************************************************/
#include <Servo.h>

//Connections for controller joysticks.
//Controller still has 5 remaining buttons for posible use 
int joyRX = 0;  //Right stick, x axis 
int joyRY = 1;  //Right stick, y axis
int joyLX = 2;  //Left stick, x axis
int joyLY = 3;  //Left stick, y axis 
int joyRB = 4;  //Right stick, button 

Servo rotateServo;            //Servo moving the yaw of entire arm 
Servo baseServo;      //Servo moving pitch of entire arm 
Servo armServo;       //Servo connected to a second joint.  Controls pitch. 
Servo flipperServo;   //Servo connected to end affector.  Controls pitch


const int degrees = 1;            //Amount of degrees to change servo position by
const int moveDelay = 5;          //amount of time inbetween motor movements (ms)
const int upperThreshold = 800:   //allows for some noise in potentiometer without unwanted movement of arm 
const int lowerThreshold = 400;   //Allows for slight noise in potentiometer without moving 

//All values taken by printing out readings when moved to this position 
float initPosRotate = 89;  
float initPosBase = 26;
float initPosArm = 10;
float initPosFlipper = 63;


/*==========Setup=========*/
void setup() {
 pinMode(joyRB, INPUT);
 
 rotateServo.attach(8);
 baseServo.attach(9);
 armServo.attach(10);
 flipperServo.attach(11);

 initialize();
}

/*========Main Loop==========*/
void loop() {
  buttonCheck();
  servoMovement();
}

/*=======Functions===========*/
/*Checks state of buttons.  Currently only set up for the initialize function */
void buttonCheck(){
 if(digitalRead(joyRB)){
   initialize();
   }
}

/* Initializes robot for use.  If arm is ever stuck for any reason, triggering
 * this function will set it to its self-contained position 
 * Moves in a different order than manual controls in order to not hit anything 
 */ 
void initialize(){
  baseServo.write(initPosBase);
  delay(100);
  armServo.write(initPosArm);
  delay(100);
  rotateServo.write(initPosRotate);
  delay(100);
  gripperServo.write(initPosFlipper)'
  delay(100);
 }
 
 /* Moves corresponding motor at each section of code 
  * Checks value of joystick potentiometers to determine
  * if the motor should move and the direction it should taken
  * then waits in order to not shake 
  */
void servoMovement(){
  int baseVal = analogRead(joyRY);
  if(baseVal > upperThreshold) {
		baseServo.write(baseServo.read() + degrees);
  }
  if(baseVal < lowerThreshold) {
		baseServo.write(baseServo.read() - degrees);
	}
  delay(moveDelay);
 

 
  int armVal = analogRead(joyLY);
  if(armVal > upperThreshold) {
		armServo.write(armServo.read() + degrees);
  }
  if(flipperVal < lowerThreshold) {
		armServo.write(armServo.read() - degrees);
	}
  delay(moveDelay);

 
 
  int rotateVal = analogRead(joyRX);
  if(rotateVal > upperThreshold) {
		rotateServo.write(rotateServo.read() + degrees);
 }
  if(rotateVal < lowerThreshold) {
		rotateServo.write(rotateServo.read() - degrees);
	}
  delay(moveDelay);

 
 
  int flipperVal = analogRead(joyLX);
  if(flipperVal > upperThreshold) {
		flipperServoServo.write(flipperServo.read() + degrees);
 }
  if(flipperVal < lowerThreshold) {
		flipperServoServo.write(flipperServo.read() - degrees);
	}
  delay(moveDelay);
 }
 
 
 
 
